<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespace：必须与对应的接口全类名一致
	id:必须与对应接口的某个对应的方法名一致
	
 -->
<mapper namespace="net.luis.mapper.UserMapper">
	<!-- parameterType:指定输入的参数是pojo（包括用户信息） 
	#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
	-->
	<insert id="save" parameterType="User">
	<!-- 将插入数据的主键返回，返回到user对象中 
		SELECT LAST_INSERT_ID():得到insert进去记录的主键值，只适用于自增主键
		非主键mysql数据库使用SELECT uuid();oracle使用SELECT 序列名.nextval()
			,此时insert语句字段id要加上,order="BEFORE"
		keyProperty:将查询到的主键值设置到parameterType指定的对象的哪个属性
		order:SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		-->
		insert into t_user(user_name,user_age) values(#{userName},#{age})
	</insert>
	
	<update id="update" parameterType="User">
		update t_user set user_name=#{userName},user_age=#{age} where user_id=#{id}
	</update>
	<!-- 根据id删除用户，需要输入id值 -->
	<delete id="delete" parameterType="int">
		delete from t_user where user_id=#{id}
	</delete>
	
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 需求：通过ID查询用户表的记录-->
	<!-- 通过select执行数据库查询
	id：标识映射文件中的sql，将sql语句封装到mappedStatement对象中，所以将id称为Statement的id
	parameterType：指定输入参数的类型，这里指定的是int型
	#{}：表示一个占位符号,接受输入参数,类型可以是简单类型，也可以是pojo、hashmap
	#{id}：其中的id表示接受输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以是任意的，
	可以是value或其他名称，如果是pojo对象，通过OGNL读取对象中的属性值
	resultType：指定sql输出结果的所映射的Java对象类型，select指定resultType表示将单条记录映射成的Java对象
	-->
	 <!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路劲 -->  
	<select id="findById" parameterType="int" resultType="User">
		select user_id id,user_name userName,user_age age from t_user where user_id=#{id}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息，可能返回多条记录
	resultType：指定就是单条记录所映射的Java对象类型
	${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中，接受的类型可以是简单类型，pojo、hashmap
	如果是简单类型，${}只能写成value。
	使用${}拼接sql，容易引起sql注入，所以不建议使用
	 -->
	<!-- <select id="findByName" parameterType="java.lang.String" resultType="net.luis.pojo.User">
		SELECT * FROM USER WHERE USERNAME LIKE '%${VALUE}%';
	</select> -->
	<select id="findAll" resultType="User">
		select user_id id,user_name userName,user_age age from t_user
	</select>
	
</mapper>